name: Deploy Backend

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'  # Ensure this matches the Python version in your virtual environment

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
          echo "DEBUG=True" >> $GITHUB_ENV

      - name: Collect static files
        run: |
          python manage.py collectstatic --noinput

      - name: Deploy to VPS
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Transfer the files
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=accept-new -r * $SERVER_USER@$SERVER_IP:~/Alsat-API/

          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=accept-new $SERVER_USER@$SERVER_IP << 'EOF'
            # Navigate to the project directory
            cd ~/Alsat-API

            # Setup swap file if it doesn't exist
            if [ ! -f /swapfile ]; then
              sudo fallocate -l 2G /swapfile
              sudo chmod 600 /swapfile
              sudo mkswap /swapfile
              sudo swapon /swapfile
              echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
            fi

            # Activate the virtual environment
            source ~/Alsat-API/venv/bin/activate

            # Install dependencies
            pip install -r requirements.txt

            # Run migrations
            python manage.py migrate

            # Collect static files (again, just in case)
            python manage.py collectstatic --noinput

            # Restart the Gunicorn process via PM2
            pm2 stop alsat-backend || true
            pm2 delete alsat-backend || true
            pm2 start $(which gunicorn) --name alsat-backend --interpreter python3 -- config.wsgi:application --bind 0.0.0.0:8000

            # Monitor resources
            echo "Current memory usage:"
            free -h
            echo "Disk usage:"
            df -h
          EOF
