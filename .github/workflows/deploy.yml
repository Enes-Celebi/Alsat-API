name: Deploy Backend

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install --upgrade pip setuptools wheel

      - name: Deploy to VPS
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Transfer the codebase to the server
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=accept-new -r * $SERVER_USER@$SERVER_IP:~/Alsat-API/

          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=accept-new $SERVER_USER@$SERVER_IP << 'EOF'
            # Setup swap file if it doesn't exist
            if [ ! -f /swapfile ]; then
              sudo fallocate -l 2G /swapfile
              sudo chmod 600 /swapfile
              sudo mkswap /swapfile
              sudo swapon /swapfile
              echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
            fi

            cd ~/Alsat-API

            # Clean up any hanging Gunicorn processes
            GUNICORN_PID=\$(ps aux | grep gunicorn | grep 'config.wsgi:application' | grep -v grep | awk '{print \$2}')
            if [ -n "\$GUNICORN_PID" ]; then
              echo "Killing Gunicorn PID \$GUNICORN_PID"
              kill -9 \$GUNICORN_PID
            fi

            # Set up virtual environment
            if [ ! -d venv ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate

            # Install Python dependencies
            pip install --upgrade pip
            pip install -r requirements.txt

            # Apply database migrations
            python manage.py migrate

            # Collect static files
            python manage.py collectstatic --noinput

            # Locate .env rile
            export $(cat .env | xargs) 

            # Start Gunicorn
            nohup gunicorn --workers 3 --bind 127.0.0.1:8000 config.wsgi:application > gunicorn.log 2>&1 &

            # Monitor resources
            echo "Current memory usage:"
            free -h
            echo "Disk usage:"
            df -h
          EOF
