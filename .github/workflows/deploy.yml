name: Deploy Backend

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install --upgrade pip setuptools wheel

      - name: Compress project files
        run: tar -czf backend.tar.gz .

      - name: Deploy to VPS
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Transfer the project files
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=accept-new backend.tar.gz $SERVER_USER@$SERVER_IP:~/Alsat-API/

          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=accept-new $SERVER_USER@$SERVER_IP << 'EOF'
            # Stop Gunicorn process
            echo "Stopping existing Gunicorn processes..."
            pkill -f gunicorn || true

            cd ~/Alsat-API

            # Backup .env file
            cp .env .env.backup

            # Clean up old files and extract new ones
            rm -rf *
            tar xzf backend.tar.gz
            rm backend.tar.gz

            # Restore .env file
            mv .env.backup .env

            # Set up virtual environment if it doesn't exist
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi

            # Activate virtual environment
            source venv/bin/activate

            # Export environment variables from .env
            echo "Exporting environment variables..."
            set -a
            source .env
            set +a

            # Install dependencies
            pip install -r requirements.txt

            # Run migrations
            python manage.py migrate

            # Create static files directory if it doesn't exist
            mkdir -p staticfiles

            # Collect static files
            python manage.py collectstatic --noinput

            # Start Gunicorn
            echo "Starting Gunicorn..."
            nohup gunicorn --workers 3 --bind 127.0.0.1:8000 config.wsgi:application > gunicorn.log 2>&1 &

            echo "Backend deployment completed."

            # Monitor resources
            echo "Current memory usage:"
            free -h
            echo "Disk usage:"
            df -h
          EOF